/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
/*npx openapi-typescript http://localhost:8000/api/v1/openapi.json -o ./frontend/src/types/openapi.ts*/

export interface paths {
    "/api/v1/crawlers/configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crawler Configs
         * @description List all crawler configurations.
         */
        get: operations["get_crawler_configs_api_v1_crawlers_configs_get"];
        put?: never;
        /**
         * Create Crawler Config
         * @description Create a new crawler configuration.
         */
        post: operations["create_crawler_config_api_v1_crawlers_configs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crawlers/configs/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crawler Config
         * @description Get a specific crawler configuration.
         */
        get: operations["get_crawler_config_api_v1_crawlers_configs__config_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Crawler Config
         * @description Delete a crawler configuration.
         */
        delete: operations["delete_crawler_config_api_v1_crawlers_configs__config_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Crawler Config
         * @description Update a crawler configuration.
         */
        patch: operations["update_crawler_config_api_v1_crawlers_configs__config_id__patch"];
        trace?: never;
    };
    "/api/v1/crawlers/configs/name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crawler Config By Name
         * @description Get a specific crawler configuration by name.
         */
        get: operations["get_crawler_config_by_name_api_v1_crawlers_configs_name__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crawlers/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Crawler Jobs */
        get: operations["get_crawler_jobs_api_v1_crawlers_jobs_get"];
        put?: never;
        /**
         * Create Crawler Job
         * @description Create and start a new crawler job.
         */
        post: operations["create_crawler_job_api_v1_crawlers_jobs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crawlers/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crawler Job
         * @description Get a crawler job.
         */
        get: operations["get_crawler_job_api_v1_crawlers_jobs__job_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Crawler Job
         * @description Delete a crawler job.
         */
        delete: operations["delete_crawler_job_api_v1_crawlers_jobs__job_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Crawler Job
         * @description Update a crawler job.
         */
        patch: operations["update_crawler_job_api_v1_crawlers_jobs__job_id__patch"];
        trace?: never;
    };
    "/api/v1/papers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Papers
         * @description List all papers.
         */
        get: operations["get_papers_api_v1_papers_get"];
        put?: never;
        /**
         * Create Paper
         * @description Create a new paper.
         */
        post: operations["create_paper_api_v1_papers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/papers/{paper_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Paper
         * @description Get a specific paper.
         */
        get: operations["get_paper_api_v1_papers__paper_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Paper
         * @description Delete a paper.
         */
        delete: operations["delete_paper_api_v1_papers__paper_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Paper
         * @description Update a paper.
         */
        patch: operations["update_paper_api_v1_papers__paper_id__patch"];
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with API Information
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoints.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CrawlerConfig
         * @description Model for crawler configuration stored in database.
         */
        CrawlerConfig: {
            /** Name */
            name: string;
            source: components["schemas"]["PaperSource"];
            /**
             * Rate Limit
             * @default 10
             */
            rate_limit: number;
            /**
             * Max Delay
             * @default 60
             */
            max_delay: number;
            /**
             * Max Attempts
             * @default 3
             */
            max_attempts: number;
            /**
             * Max Concurrent
             * @default 10
             */
            max_concurrent: number;
            /**
             * Output Dir
             * @default crawled_papers
             */
            output_dir: string;
            /** Id */
            _id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * CrawlerConfigCreate
         * @description Model for creating a new crawler configuration.
         */
        CrawlerConfigCreate: {
            /** Name */
            name: string;
            source: components["schemas"]["PaperSource"];
            /**
             * Rate Limit
             * @default 10
             */
            rate_limit: number;
            /**
             * Max Delay
             * @default 60
             */
            max_delay: number;
            /**
             * Max Attempts
             * @default 3
             */
            max_attempts: number;
            /**
             * Max Concurrent
             * @default 10
             */
            max_concurrent: number;
            /**
             * Output Dir
             * @default crawled_papers
             */
            output_dir: string;
        };
        /**
         * CrawlerConfigUpdate
         * @description Model for updating an existing crawler configuration.
         */
        CrawlerConfigUpdate: {
            /** Name */
            name?: string | null;
            source?: components["schemas"]["PaperSource"] | null;
            /** Rate Limit */
            rate_limit?: number | null;
            /** Max Delay */
            max_delay?: number | null;
            /** Max Attempts */
            max_attempts?: number | null;
            /** Max Concurrent */
            max_concurrent?: number | null;
            /** Output Dir */
            output_dir?: string | null;
        };
        /**
         * CrawlerJob
         * @description Model for crawler job stored in database.
         */
        CrawlerJob: {
            /** Config Name */
            config_name: string;
            /** Query */
            query?: string | null;
            /** Urls */
            urls?: string[] | null;
            /** Id */
            _id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Error Message */
            error_message?: string | null;
            /** @default pending */
            status: components["schemas"]["JobStatus"];
        };
        /**
         * CrawlerJobCreate
         * @description Model for creating a new crawler job.
         */
        CrawlerJobCreate: {
            /** Config Name */
            config_name: string;
            /** Query */
            query?: string | null;
            /** Urls */
            urls?: string[] | null;
        };
        /**
         * CrawlerJobUpdate
         * @description Model for updating an existing crawler job.
         */
        CrawlerJobUpdate: {
            /** Query */
            query?: string | null;
            /** Urls */
            urls?: string[] | null;
        };
        /**
         * CreateResponse
         * @description Response model for create operations.
         */
        CreateResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Created Count */
            created_count: number;
            /** Created Ids */
            created_ids: string[];
        };
        /**
         * DeleteResponse
         * @description Response model for delete operations.
         */
        DeleteResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Deleted Count */
            deleted_count: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * JobStatus
         * @description Status of processing a job.
         * @enum {string}
         */
        JobStatus: "pending" | "running" | "completed" | "failed";
        /**
         * Paper
         * @description Model for paper stored in database.
         */
        Paper: {
            /** Title */
            title: string;
            /** Authors */
            authors: string[];
            source: components["schemas"]["PaperSource"];
            /** Source Id */
            source_id: string;
            /** Year */
            year?: number | null;
            /** Url */
            url?: string | null;
            /** Pdf Url */
            pdf_url?: string | null;
            /** Local Pdf Path */
            local_pdf_path?: string | null;
            /** Venues */
            venues?: string[];
            /** Sections */
            sections?: {
                [key: string]: components["schemas"]["PaperSection"];
            };
            /** Job Id */
            job_id?: string | null;
            /** Id */
            _id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PaperCreate
         * @description Model for creating a new paper.
         */
        PaperCreate: {
            /** Title */
            title: string;
            /** Authors */
            authors: string[];
            source: components["schemas"]["PaperSource"];
            /** Source Id */
            source_id: string;
            /** Year */
            year?: number | null;
            /** Url */
            url?: string | null;
            /** Pdf Url */
            pdf_url?: string | null;
            /** Local Pdf Path */
            local_pdf_path?: string | null;
            /** Venues */
            venues?: string[];
            /** Sections */
            sections?: {
                [key: string]: components["schemas"]["PaperSection"];
            };
            /** Job Id */
            job_id?: string | null;
        };
        /**
         * PaperSection
         * @description Model for representing a section of a research paper.
         */
        PaperSection: {
            /** Title */
            title: string;
            /** Content */
            content: string;
            /**
             * Level
             * @default 1
             */
            level: number;
        };
        /**
         * PaperSource
         * @description Source of a paper.
         * @enum {string}
         */
        PaperSource: "acl_anthology";
        /**
         * PaperUpdate
         * @description Model for updating an existing paper.
         */
        PaperUpdate: {
            /** Title */
            title?: string | null;
            /** Authors */
            authors?: string[] | null;
            source?: components["schemas"]["PaperSource"] | null;
            /** Source Id */
            source_id?: string | null;
            /** Year */
            year?: number | null;
            /** Url */
            url?: string | null;
            /** Pdf Url */
            pdf_url?: string | null;
            /** Local Pdf Path */
            local_pdf_path?: string | null;
            /** Venues */
            venues?: string[] | null;
            /** Sections */
            sections?: {
                [key: string]: components["schemas"]["PaperSection"];
            } | null;
            /** Job Id */
            job_id?: string | null;
        };
        /**
         * UpdateResponse
         * @description Response model for update operations.
         */
        UpdateResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Matched Count */
            matched_count: number;
            /** Modified Count */
            modified_count: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_crawler_configs_api_v1_crawlers_configs_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrawlerConfig"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_crawler_config_api_v1_crawlers_configs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrawlerConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_crawler_config_api_v1_crawlers_configs__config_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrawlerConfig"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_crawler_config_api_v1_crawlers_configs__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_crawler_config_api_v1_crawlers_configs__config_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrawlerConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_crawler_config_by_name_api_v1_crawlers_configs_name__name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrawlerConfig"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_crawler_jobs_api_v1_crawlers_jobs_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                status?: components["schemas"]["JobStatus"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrawlerJob"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_crawler_job_api_v1_crawlers_jobs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrawlerJobCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_crawler_job_api_v1_crawlers_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrawlerJob"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_crawler_job_api_v1_crawlers_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_crawler_job_api_v1_crawlers_jobs__job_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrawlerJobUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_papers_api_v1_papers_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paper"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_paper_api_v1_papers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaperCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_paper_api_v1_papers__paper_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_paper_api_v1_papers__paper_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_paper_api_v1_papers__paper_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paper_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaperUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
}
